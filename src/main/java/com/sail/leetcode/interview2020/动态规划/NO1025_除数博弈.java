package com.sail.leetcode.interview2020.动态规划;

/**
 * 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。
 *
 * 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：
 *
 * 选出任一 x，满足 0 < x < N 且 N % x == 0 。
 * 用 N - x 替换黑板上的数字 N 。
 * 如果玩家无法执行这些操作，就会输掉游戏。
 *
 * 只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：2
 * 输出：true
 * 解释：爱丽丝选择 1，鲍勃无法进行操作。
 * 示例 2：
 *
 * 输入：3
 * 输出：false
 * 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
 *  
 *
 * 提示：
 *
 * 1 <= N <= 1000
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/divisor-game
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class NO1025_除数博弈 {

    /**
     * 解法一
     * 首先这是一道数学题，对于偶数先手必赢，奇数的话如果对手是最佳状态必输。
     */
    public boolean divisorGame1(int N) {
        return N%2==0;
    }


    /**
     * 解法二 dp
     * 对于一个数d[i]我先手减去一个数j以后，得到另一个数d[i-j]，i先手的结果可以利用i-j这个数先手的结果，肯定可以dp
     * d[i]表示i这个数爱丽丝先手会不会赢
     * 状态转移方程 d[i] =  !d[i-因子1] || !d[i-因子2] || !d[i-因子3] ||......
     * 为什么要对右边的结果取反呢?
     * 因为左边d[i]表示爱丽丝现在先手，她先手完以后就该鲍勃了，而d[i-因子]表示的是爱丽丝先手能否获胜的结果，
     * 所以对于鲍勃而言爱丽丝赢了，他就是输，爱丽丝输了，他就是赢，，所以对d[i-因子]取反获得的是鲍勃此时先手的状态
     * 由此可得，
     */
    public boolean divisorGame2(int N) {
        boolean[] d = new boolean[N+1];

        d[1]= false;
        for(int i=2;i<=N;i++){
            for(int j=1;j<i;j++){
                if(i%j==0){
                    d[i] = d[i]||!d[i-j];
                }
                if(d[i]){
                    break;
                }
            }
        }
        return d[N];
    }
}
